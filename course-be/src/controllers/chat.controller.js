import dotenv from "dotenv";
import fetch from "node-fetch";
import CourseService from "../services/course.service.js"; // üî• import th√™m service

dotenv.config();

// T·∫°o instance c·ªßa CourseService
const courseService = new CourseService();

export const chatWithAI = async (req, res) => {
  try {
    const { message } = req.body;

    // üîπ L·∫•y d·ªØ li·ªáu kh√≥a h·ªçc t·ª´ DB (10 kh√≥a ƒë·∫ßu ti√™n)
    const { data: courses } = await courseService.getListCourses({
      page: 1,
      pageSize: 10,
    });

    // üîπ Chuy·ªÉn th√†nh d·∫°ng vƒÉn b·∫£n g·ªçn g√†ng cho AI hi·ªÉu
    const courseListText = courses
      .map(
        (c) =>
          `‚Ä¢ ${c.title} (${c.categoryId || "Ch∆∞a c√≥ danh m·ª•c"}) - ${
            c.description || "Kh√¥ng c√≥ m√¥ t·∫£"
          }`
      )
      .join("\n");

    // üîπ Prompt cho h·ªá th·ªëng (system)
    const systemPrompt = `
    B·∫°n l√† chatbot h·ªó tr·ª£ ng∆∞·ªùi d√πng tr√™n website WebCourse.
    D∆∞·ªõi ƒë√¢y l√† danh s√°ch kh√≥a h·ªçc hi·ªán c√≥ tr√™n h·ªá th·ªëng:

    ${courseListText}

    H√£y s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ t∆∞ v·∫•n khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ kh√≥a h·ªçc.
    N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn kh√≥a h·ªçc, ch·ªâ tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† l·ªãch s·ª±.
`;

    // üîπ G·ªçi API OpenRouter
    const response = await fetch(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          "HTTP-Referer": process.env.FRONTEND_URL || " http://localhost:3000",
          "X-Title": "WebCourse AI Chatbot",
        },
        body: JSON.stringify({
          model: "openai/gpt-4o-mini",
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: message },
          ],
        }),
      }
    );

    const data = await response.json();

    // üîπ Ki·ªÉm tra l·ªói t·ª´ OpenRouter
    if (!response.ok) {
      console.error("OpenRouter error:", data);
      return res
        .status(response.status)
        .json({ error: data.message || "API error" });
    }

    const reply = data.choices?.[0]?.message?.content || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
    res.json({ reply });
  } catch (err) {
    console.error("Server error:", err);
    res
      .status(500)
      .json({ error: "L·ªói server ho·∫∑c k·∫øt n·ªëi OpenRouter th·∫•t b·∫°i." });
  }
};
